<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建windows的qcow2镜像</title>
      <link href="/2024/01/10/%E5%88%9B%E5%BB%BAwindows%E7%9A%84qcow2%E9%95%9C%E5%83%8F/"/>
      <url>/2024/01/10/%E5%88%9B%E5%BB%BAwindows%E7%9A%84qcow2%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>创建qcow2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /path/to/win-iso/windows_server_2019.qcow2 50G</span><br></pre></td></tr></table></figure><p>安装windows镜像到qcow2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type=kvm --name win-2019 --cpu=host --memory 3072 --vcpus=2 --os-type=windows --os-variant=windows --disk=//path/to/win-iso/cn_windows_server_2019_x64_dvd_4de40f33.iso,device=cdrom --disk=/path/to//win-iso/virtio-win-0.1.172.iso,device=cdrom --network=default,model=virtio --graphics vnc --disk=/path/to/win-iso/windows_server_2019.qcow2,size=50,bus=virtio,format=qcow2 --boot cdrom --check all=off</span><br></pre></td></tr></table></figure><p>压缩镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -O qcow2 windows_server_2019.qcow2 new-windows_server_2019.qcow2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fio测试磁盘读写性能</title>
      <link href="/2023/12/25/Fio%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD/"/>
      <url>/2023/12/25/Fio%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>内核：4.10</p><p>cpu：8</p><p>内存：8GB</p><p>硬盘：100GB</p><h1 id="安装fio"><a href="#安装fio" class="headerlink" title="安装fio"></a>安装fio</h1><p>fio 的全称是 flexible I&#x2F;O tester，是常用的磁盘性能测试工具。fio 通过产生一系列的线程或进程来执行用户指定的特定类型 IO 操作。典型的用法是用户将需要模拟的 IO 负载写入到 job file 中。fio 支持多种 IO 引擎，通过 ioengine&#x3D;io_uring，我们可以在 fio 中使用 io_uring 接口来测试磁盘性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install fio</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li><p>4k随机读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li><li><p>4k 随机写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randwrite -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li><li><p>随机读写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randrw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li><li><p>4k 顺序读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=read -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li><li><p>4k 顺序写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=write -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li><li><p>4K顺序读写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=rw -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure></li></ul><p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;16k          单次io的块文件大小为16k<br>bsrange&#x3D;512-2048     同上，提定数据块的大小范围<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;30        本次的测试线程为30.<br>runtime&#x3D;1000       测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;psync      io引擎使用pync方式<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p><p>此外<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tools </category>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Debian使用Docker</title>
      <link href="/2023/12/25/%E5%9F%BA%E4%BA%8EDebian%E4%BD%BF%E7%94%A8docker/"/>
      <url>/2023/12/25/%E5%9F%BA%E4%BA%8EDebian%E4%BD%BF%E7%94%A8docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tools </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用性能测试小工具集锦</title>
      <link href="/2023/12/25/%E5%B8%B8%E7%94%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/"/>
      <url>/2023/12/25/%E5%B8%B8%E7%94%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="常用性能测试小工具集锦"><a href="#常用性能测试小工具集锦" class="headerlink" title="常用性能测试小工具集锦"></a>常用性能测试小工具集锦</h1><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>​基于工作中做的性能测试，收纳整理出《常用性能测试小工具集锦》。主要从性能测试和工具集锦两个方面分享。</p><h3 id="性能测试-1"><a href="#性能测试-1" class="headerlink" title="性能测试"></a>性能测试</h3><p>​性能测试是一种评估系统性能的方法，它可以检测系统的可扩展性、吞吐量、响应时间、负载能力、稳定性和安全性等指标。性能测试可以帮助开发人员、系统管理员和业务用户了解系统的实际运行情况，并找出可能存在的瓶颈和问题。</p><h4 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h4><p>​衡量系统性能的评价标准。</p><h5 id="系统性能测试指标"><a href="#系统性能测试指标" class="headerlink" title="系统性能测试指标"></a><strong>系统性能测试指标</strong></h5><p>​响应时间、系统处理能力，吞吐量，并发用户数，错误率等。</p><h5 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h5><p>​简称RT，指的是客户发出请求到得到系统响应的整个过程的时间。也就是用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。</p><h5 id="系统处理能力"><a href="#系统处理能力" class="headerlink" title="系统处理能力"></a>系统处理能力</h5><p>​系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价。交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。系统处理能力又用HPS(每秒点击次数)，TPS(系统每秒处理交易次数)，QPS(系统每秒处理查询次数)指标来度量。</p><h5 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h5><p>​吞吐量是指系统在单位时间内处理请求的数量。尤其对于并发系统，通常需要用吞吐量作为性能指标。</p><h5 id="并发用户数"><a href="#并发用户数" class="headerlink" title="并发用户数"></a>并发用户数</h5><p>​并发用户数指在同一时刻内，登录系统并进行业务操作的用户数量。</p><h5 id="错误率"><a href="#错误率" class="headerlink" title="错误率"></a>错误率</h5><p>​简称FR，指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。</p><h4 id="资源性能指标"><a href="#资源性能指标" class="headerlink" title="资源性能指标"></a><strong>资源性能指标</strong></h4><p>CPU、内存、磁盘吞吐量、网络吞吐量等。</p><h5 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h5><p>​CPU指标主要指的CPU利用率。单位时间内服务器CPU的使用统计，可以用除CPU空闲时间外其他时间占总CPU时间的百分比来表示。即：CPU使用率&#x3D;1-CPU空闲时间&#x2F;总CPU时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字段说明：</span><br><span class="line">us (user)：用户态的CPU使用时间比例，是用户运行程序的真正时间，它不包括后面的ni时间。</span><br><span class="line">sy (system): 内核态的CPU使用时间比例，是操作系统的运行时间，操作系统运行时，用户运行程序往往处于等待状态。</span><br><span class="line">ni (nice): 表示低优先级用户态的CPU时间比例，取值范围为[-20,19]，数值越大，则优先级越低。</span><br><span class="line">id (idle): 表示空闲的CPU时间比例，值越大，CPU空闲时间比例越高，利用率越低。</span><br><span class="line">wa (iowait): 表示处于IO等待状态的CPU时间比例。</span><br><span class="line">hi (hard interrupt): 表示处理硬中断的CPU时间比例。硬中断，也叫异步中断。硬中断是由硬件设备依照CPU时钟信号产生的，即意味着中断发生具备随机性和突发性，可以在指令正在执行时发生。</span><br><span class="line">si (soft interrupt): 与hi相反，表示处理软中断的CPU时间比例。软中断，也叫同步中断。软中断是由CPU执行中断产生指令时产生，是由程序预先实现好的，不是随机的。</span><br><span class="line">st (steal): 表示当前系统运行在虚拟机中被其他虚拟机占用的CPU时间比例。这体现为物理 CPU 没有办法为当前系统服务，通常正在为另一个系统服务。 在虚拟机超卖比较严重的场景，这个数值非常明显。 这部分时间显然不是当前系统所用，而是被其他系统占用了。</span><br></pre></td></tr></table></figure><p>​当us很高时，说明CPU时间主要消耗在用户代码上，可以从用户代码角度考虑优化性能；当sy很高时，说明CPU时间主要消耗在内核上，可以从是否系统调用频繁、CPU进程或线程切换频繁角度考虑性能的优化；当wa很高时，说明有进程在进行频繁的IO操作，可能是磁盘IO或者网络IO。一般情况下，如果%us+%sy&lt;&#x3D;70%，我们可以认为系统的运行状态良好。</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>​total(内存总量),free(空闲内存),used(已使用内存),buffer&#x2F;cache(缓存)。buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会优先从buffers与cached内存区查找，然后才从磁盘读取。通过缓存，能够大大提高了操作系统的性能。因此，对于linux系统来说，可用于分配的内存不止free的内存，同时还包括cached的内存（其实还包括buffers的内存）。cached和buffers都属于缓存，它们的区别主要在于cached主要用来缓冲频繁读取的文件，它可以直接记忆我们打开的文件内容；而buffers主要用来给块设备做的缓冲大小，只记录文件系统的元数据(metadata)以及缓存文件(tracking in-flight pages)信息，比如存储目录里面的内容，权限等。</p><p>在性能测试中，经常会用到系统已用内存、物理已用内存、系统内存占用率以及物理内存占用率这几个指标，它们的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">物理已用内存 = 实际已用内存 - 缓冲 - 缓存 </span><br><span class="line">物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存 </span><br><span class="line">应用程序可用空闲内存 = 总物理内存 - 实际已用内存 </span><br><span class="line">应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存</span><br><span class="line">total = used + free + buffer/cache</span><br><span class="line">avaiable = free + buffer/cache</span><br></pre></td></tr></table></figure><p>​一般情况下，系统内存占用率&lt;&#x3D;70%，我们可以认为系统的内存使用情况良好，如果超出则说明系统内存资源紧张。</p><h5 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h5><ul><li>磁盘I&#x2F;O：I&#x2F;O，即input&#x2F;output，磁盘的输入输出，输入指的是对磁盘写入数据，输出指的是从磁盘读出数据，磁盘I&#x2F;O可以理解为读写。应用发起的一次或多次数据请求，I&#x2F;O请求的数据量又称I&#x2F;O大小，单位为KiB，例如4KiB、256KiB、1024KiB等；</li><li>磁盘IOPS：磁盘IOPS是指一秒内磁盘进行多少次I&#x2F;O读写；</li><li>磁盘吞吐量：每秒磁盘I&#x2F;O的流量，即磁盘写入加上读出的数据的大小。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/O 读写的类型，大体上可以分为：</span><br><span class="line">读 / 写 I/O：存数据时候对应的是写操作，取数据的时候对应的是是读操作。</span><br><span class="line">大 / 小块 I/O：这个数值指的是控制器指令中给出的连续读出扇区数目的多少。</span><br><span class="line">连续 / 随机 I/O：连续 I/O 指的是本次 I/O 给出的初始扇区地址和上一次 I/O 的结束扇区地址是完全连续或者相隔不多的。反之，如果相差很大，则算作一次随机 I/O。连续 I/O 比随机 I/O 效率高，因为在做连续 I/O 的时候，磁头几乎不用换道，或者换道的时间很短；而对于随机 I/O，如果这个 I/O 很多的话，会导致磁头不停地换道，造成效率的极大降低。</span><br><span class="line">顺序 / 并发 I/O：从概念上讲，并发 I/O 就是指向一块磁盘发出一条 I/O 指令后，不必等待它回应，接着向另外一块磁盘发 I/O 指令。对于具有条带性的 RAID（LUN），对其进行的 I/O 操作是并发的，例如：raid 0+1(1+0),raid5 等。反之则为顺序 I/O。</span><br><span class="line">吞吐量 = IOPS * I/O大小</span><br></pre></td></tr></table></figure><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><p>​网络吞吐量是指在某个时刻，在网络中的两个节点之间，提给给网络应用的剩余带宽。 即在没有帧丢失的状况下，设备能够接受的最大速率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">通常是以 4 个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下</span><br><span class="line">带宽，表示链路的最大传输速率，单位是 b/s （比特 / 秒），带宽越大，其传输能力就越强。</span><br><span class="line">延时，表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 TCP 连接所需的时间延迟，或一个数据包往返所需的时间延迟。</span><br><span class="line">吞吐率，表示单位时间内成功传输的数据量，单位是 b/s（比特 / 秒）或者 B/s（字节 / 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高。</span><br><span class="line">PPS，全称是 Packet Per Second（包 / 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能力。</span><br><span class="line">当然，除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</span><br><span class="line"></span><br><span class="line">网络的可用性，表示网络能否正常通信；</span><br><span class="line">并发连接数，表示 TCP 连接数量；</span><br><span class="line">丢包率，表示所丢失数据包数量占所发送数据组的比率；</span><br><span class="line">重传率，表示重传网络包的比例；</span><br></pre></td></tr></table></figure><h2 id="工具集锦"><a href="#工具集锦" class="headerlink" title="工具集锦"></a>工具集锦</h2><h4 id="unixBench"><a href="#unixBench" class="headerlink" title="unixBench"></a>unixBench</h4><p>UnixBench的测试能力包含系统调用、读写、进程、2D、3D、管道、运算等系统基准性能，会对系统CPU、内存、磁盘、网络等各个方面进行一系列的测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Run -c 1 -c 8 //表示执行两次，第一次单个copies,第二次8个copies的测试任务。</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br><span class="line">make[1]: Entering directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class="line">Checking distribution of files</span><br><span class="line">./pgms  exists</span><br><span class="line">./src  exists</span><br><span class="line">./testdir  exists</span><br><span class="line">./results  exists</span><br><span class="line">make[1]: Leaving directory &#x27;/path/to/test-tool/UnixBench5.1.3-1&#x27;</span><br><span class="line"></span><br><span class="line">   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class="line">   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #</span><br><span class="line">   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######</span><br><span class="line">   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #</span><br><span class="line">   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #</span><br><span class="line">    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #</span><br><span class="line"></span><br><span class="line">   Version 5.1.3                      Based on the Byte Magazine Unix Benchmark</span><br><span class="line"></span><br><span class="line">   Multi-CPU version                  Version 5 revisions by Ian Smith,</span><br><span class="line">                                      Sunnyvale, CA, USA</span><br><span class="line">   January 13, 2011                   johantheghost at yahoo period com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">1 x Execl Throughput  1 2 3</span><br><span class="line"></span><br><span class="line">1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">1 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">1 x Process Creation  1 2 3</span><br><span class="line"></span><br><span class="line">1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">1 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class="line"></span><br><span class="line">1 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class="line"></span><br><span class="line">8 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">8 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">8 x Execl Throughput  1 2 3</span><br><span class="line"></span><br><span class="line">8 x File Copy 1024 bufsize 2000 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">8 x File Copy 256 bufsize 500 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">8 x File Copy 4096 bufsize 8000 maxblocks  1 2 3</span><br><span class="line"></span><br><span class="line">8 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">8 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">8 x Process Creation  1 2 3</span><br><span class="line"></span><br><span class="line">8 x System Call Overhead  1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">8 x Shell Scripts (1 concurrent)  1 2 3</span><br><span class="line"></span><br><span class="line">8 x Shell Scripts (8 concurrent)  1 2 3</span><br><span class="line"></span><br><span class="line">========================================================================</span><br><span class="line">   BYTE UNIX Benchmarks (Version 5.1.3)</span><br><span class="line"></span><br><span class="line">   System: wang-PC: GNU/Linux</span><br><span class="line">   OS: GNU/Linux -- 5.15.77-amd64-desktop -- #2 SMP Thu Jun 15 16:06:18 CST 2023</span><br><span class="line">   Machine: x86_64 (unknown)</span><br><span class="line">   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)</span><br><span class="line">   CPU 0: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 1: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 2: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 3: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 4: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 5: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 6: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   CPU 7: Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz (4199.9 bogomips)</span><br><span class="line">          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET, Intel virtualization</span><br><span class="line">   14:50:41 up 11 days, 23:45,  1 user,  load average: 0.95, 1.32, 7.18; runlevel 5</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">Benchmark Run: Wed Jan 24 2024 14:50:41 - 15:18:32</span><br><span class="line">8 CPUs in system; running 1 parallel copy of tests</span><br><span class="line"></span><br><span class="line">Dhrystone 2 using register variables       47877041.4 lps   (10.0 s, 7 samples)</span><br><span class="line">Double-Precision Whetstone                     7784.4 MWIPS (9.0 s, 7 samples)</span><br><span class="line">Execl Throughput                               5666.5 lps   (30.0 s, 2 samples)</span><br><span class="line">File Copy 1024 bufsize 2000 maxblocks       1493924.1 KBps  (30.0 s, 2 samples)</span><br><span class="line">File Copy 256 bufsize 500 maxblocks          426805.3 KBps  (30.0 s, 2 samples)</span><br><span class="line">File Copy 4096 bufsize 8000 maxblocks       3119870.2 KBps  (30.0 s, 2 samples)</span><br><span class="line">Pipe Throughput                             2577750.5 lps   (10.0 s, 7 samples)</span><br><span class="line">Pipe-based Context Switching                 296557.3 lps   (10.0 s, 7 samples)</span><br><span class="line">Process Creation                              13157.5 lps   (30.0 s, 2 samples)</span><br><span class="line">Shell Scripts (1 concurrent)                  14761.5 lpm   (60.0 s, 2 samples)</span><br><span class="line">Shell Scripts (8 concurrent)                   4321.8 lpm   (60.0 s, 2 samples)</span><br><span class="line">System Call Overhead                        2784511.9 lps   (10.0 s, 7 samples)</span><br><span class="line"></span><br><span class="line">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class="line">Dhrystone 2 using register variables         116700.0   47877041.4   4102.6</span><br><span class="line">Double-Precision Whetstone                       55.0       7784.4   1415.3</span><br><span class="line">Execl Throughput                                 43.0       5666.5   1317.8</span><br><span class="line">File Copy 1024 bufsize 2000 maxblocks          3960.0    1493924.1   3772.5</span><br><span class="line">File Copy 256 bufsize 500 maxblocks            1655.0     426805.3   2578.9</span><br><span class="line">File Copy 4096 bufsize 8000 maxblocks          5800.0    3119870.2   5379.1</span><br><span class="line">Pipe Throughput                               12440.0    2577750.5   2072.1</span><br><span class="line">Pipe-based Context Switching                   4000.0     296557.3    741.4</span><br><span class="line">Process Creation                                126.0      13157.5   1044.2</span><br><span class="line">Shell Scripts (1 concurrent)                     42.4      14761.5   3481.5</span><br><span class="line">Shell Scripts (8 concurrent)                      6.0       4321.8   7203.0</span><br><span class="line">System Call Overhead                          15000.0    2784511.9   1856.3</span><br><span class="line">                                                                   ========</span><br><span class="line">System Benchmarks Index Score                                        2360.4</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">Benchmark Run: Wed Jan 24 2024 15:18:32 - 15:46:49</span><br><span class="line">8 CPUs in system; running 8 parallel copies of tests</span><br><span class="line"></span><br><span class="line">Dhrystone 2 using register variables      176274670.8 lps   (10.0 s, 7 samples)</span><br><span class="line">Double-Precision Whetstone                    46994.6 MWIPS (9.4 s, 7 samples)</span><br><span class="line">Execl Throughput                              20151.0 lps   (30.0 s, 2 samples)</span><br><span class="line">File Copy 1024 bufsize 2000 maxblocks       1745833.5 KBps  (30.0 s, 2 samples)</span><br><span class="line">File Copy 256 bufsize 500 maxblocks          478830.4 KBps  (30.0 s, 2 samples)</span><br><span class="line">File Copy 4096 bufsize 8000 maxblocks       4568801.0 KBps  (30.0 s, 2 samples)</span><br><span class="line">Pipe Throughput                             9157085.1 lps   (10.0 s, 7 samples)</span><br><span class="line">Pipe-based Context Switching                1132991.1 lps   (10.0 s, 7 samples)</span><br><span class="line">Process Creation                              44340.3 lps   (30.0 s, 2 samples)</span><br><span class="line">Shell Scripts (1 concurrent)                  36537.4 lpm   (60.0 s, 2 samples)</span><br><span class="line">Shell Scripts (8 concurrent)                   4653.2 lpm   (60.1 s, 2 samples)</span><br><span class="line">System Call Overhead                        8498217.7 lps   (10.0 s, 7 samples)</span><br><span class="line"></span><br><span class="line">System Benchmarks Index Values               BASELINE       RESULT    INDEX</span><br><span class="line">Dhrystone 2 using register variables         116700.0  176274670.8  15104.9</span><br><span class="line">Double-Precision Whetstone                       55.0      46994.6   8544.5</span><br><span class="line">Execl Throughput                                 43.0      20151.0   4686.3</span><br><span class="line">File Copy 1024 bufsize 2000 maxblocks          3960.0    1745833.5   4408.7</span><br><span class="line">File Copy 256 bufsize 500 maxblocks            1655.0     478830.4   2893.2</span><br><span class="line">File Copy 4096 bufsize 8000 maxblocks          5800.0    4568801.0   7877.2</span><br><span class="line">Pipe Throughput                               12440.0    9157085.1   7361.0</span><br><span class="line">Pipe-based Context Switching                   4000.0    1132991.1   2832.5</span><br><span class="line">Process Creation                                126.0      44340.3   3519.1</span><br><span class="line">Shell Scripts (1 concurrent)                     42.4      36537.4   8617.3</span><br><span class="line">Shell Scripts (8 concurrent)                      6.0       4653.2   7755.3</span><br><span class="line">System Call Overhead                          15000.0    8498217.7   5665.5</span><br><span class="line">                                                                   ========</span><br><span class="line">System Benchmarks Index Score                                        5874.3</span><br></pre></td></tr></table></figure><p>测试项目</p><p><img src="/home/wang/.config/Typora/typora-user-images/image-20240124153054135.png" alt="image-20240124153054135"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Dhrystone测试：</span><br><span class="line">测试聚焦在字符串处理，没有浮点运算操作。这个测试用于测试链接器编译、代码优化、内存缓存、等待状态、整数数据类型等。</span><br><span class="line">Whetstone测试：</span><br><span class="line">测试项目用于测试浮点运算效率和速度。含若干个科学计算的典型性能模块，包含大量的C语言函数,sin cos sqrt exp和日志以及使用整数和浮点的数学操作。包含数组访问、条件分支和过程调用。</span><br><span class="line">Execl Throughput测试：</span><br><span class="line">每秒钟可以执行的execl系统调用的次数。</span><br><span class="line">File Copy测试：</span><br><span class="line">这项测试衡量文件数据从一个文件被传输到另外一个，使用大量的缓存。包括文件的读、写、复制测试，测试指标是一定时间内（默认是10秒）被重写、读、复制的字符数量。</span><br><span class="line">Pipe Throughput(管道吞吐)测试:</span><br><span class="line">测试在一秒钟一个进程写512比特到一个管道中并且读回来的次数。管道吞吐测试和实际编程有差距。</span><br><span class="line">Pipe-based Context Switching(基于管道的上下文交互)测试:</span><br><span class="line">测试衡量两个进程通过管道交换和整数倍的增加吞吐的次数。基于管道的上下文切换和真实程序很类似。测试程序产生一个双向管道通讯的子线程。</span><br><span class="line">Process Creation(进程创建)测试:</span><br><span class="line">这项测试衡量一个进程能产生子线程并且立即退出的次数。新进程真的创建进程阻塞和内存占用，所以测试程序直接使用内存带宽。这项测试用于典型的比较大量的操作系统进程创建操作。</span><br><span class="line">Shell Scripts测试:</span><br><span class="line">shell脚本测试用于衡量在一分钟内，一个进程可以启动并停止shell脚本的次数，通常会测试1，2， 3， 4， 8 个shell脚本的共同拷贝，shell脚本是一套转化数据文件的脚本。</span><br><span class="line">System Call Overhead （系统调用消耗）测试:</span><br><span class="line">测试衡量进入和离开系统内核的消耗，例如，系统调用的消耗。程序简单重复的执行getpid调用（返回调用的进程id）。消耗的指标是调用进入和离开内核的执行时间。</span><br><span class="line">Graphical Tests(图形)测试:</span><br><span class="line">测试非常粗的2D和3D图形性能，尤其是3D测试非常有限。测试结果和硬件，系统合适的驱动关系很大。</span><br></pre></td></tr></table></figure><h4 id="fio"><a href="#fio" class="headerlink" title="fio"></a>fio</h4><p>fio主要用来测试硬盘io性能。这个工具的可定制性非常强，可以根据测试者的想法进行各种混合io测试，它支持13种不同类型io引擎（libaio、sync、mmap、posixaio、network等等）。它可以测试块设备或文件，可以通过多线程或进程模拟各种io操作，可以测试统计iops、带宽和时延等性能。我们主要使用fio工具进行存储性能测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fio -name=iouring_test -filename=/mnt/vdd/testfile -iodepth=128 -thread -rw=randread -ioengine=io_uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br></pre></td></tr></table></figure><p>说明：<br>filename&#x3D;&#x2F;dev&#x2F;sdb1    测试文件名称，通常选择需要测试的盘的data目录。<br>direct&#x3D;1         测试过程绕过机器自带的buffer。使测试结果更真实。<br>bs&#x3D;4k          单次io的块文件大小为16k<br>size&#x3D;5g  本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs&#x3D;1        本次的测试线程为30.<br>runtime&#x3D;120       测试时间为120秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine&#x3D;io_uring      io引擎使用io_uring方式<br>group_reporting     关于显示结果的，汇总每个进程的信息。</p><p>此外<br>rwmixwrite&#x3D;30      在混合读写的模式下，写占30%<br>lockmem&#x3D;1g        只使用1g内存进行测试。<br>zero_buffers       用0初始化系统buffer。<br>nrfiles&#x3D;8        每个进程生成文件的数量。<br>read 顺序读<br>write 顺序写<br>rw,readwrite 顺序混合读写<br>randwrite 随机写<br>randread 随机读<br>randrw 随机混合读写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">uring -sqthread_poll=1 -direct=1 -bs=4k -size=10G -numjobs=1 -runtime=120 -group_reporting</span><br><span class="line">iouring_test: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=io_uring, iodepth=128</span><br><span class="line">fio-3.22</span><br><span class="line">Starting 1 thread</span><br><span class="line">Jobs: 1 (f=1): [r(1)][3.2%][eta 01h:01m:42s]                        </span><br><span class="line">iouring_test: (groupid=0, jobs=1): err= 0: pid=63227: Wed Jan 24 15:55:58 2024</span><br><span class="line">  read: IOPS=682, BW=2729KiB/s (2795kB/s)(330MiB/123713msec)  //读操作的iops(每秒输入输出量)和bw(带宽)</span><br><span class="line">    clat (usec): min=506, max=11807k, avg=187540.47, stdev=846840.59</span><br><span class="line">     lat (usec): min=507, max=11807k, avg=187541.31, stdev=846840.60</span><br><span class="line">    clat percentiles (usec):</span><br><span class="line">     |  1.00th=[    1188],  5.00th=[    5800], 10.00th=[    8160],</span><br><span class="line">     | 20.00th=[   11469], 30.00th=[   15008], 40.00th=[   19792],</span><br><span class="line">     | 50.00th=[   26084], 60.00th=[   36439], 70.00th=[   56361],</span><br><span class="line">     | 80.00th=[  104334], 90.00th=[  238027], 95.00th=[  425722],</span><br><span class="line">     | 99.00th=[ 5804917], 99.50th=[ 7214203], 99.90th=[ 8422163],</span><br><span class="line">     | 99.95th=[ 8657044], 99.99th=[10804528]</span><br><span class="line">   bw (  KiB/s): min= 1357, max= 5397, per=100.00%, avg=2806.35, stdev=636.20, samples=240</span><br><span class="line">   iops        : min=  339, max= 1349, avg=701.40, stdev=159.08, samples=240</span><br><span class="line">  lat (usec)   : 750=0.13%, 1000=0.50%</span><br><span class="line">  lat (msec)   : 2=0.93%, 4=1.25%, 10=12.60%, 20=25.15%, 50=27.08%</span><br><span class="line">  lat (msec)   : 100=11.79%, 250=11.16%, 500=5.21%, 750=1.25%, 1000=0.54%</span><br><span class="line">  lat (msec)   : 2000=0.58%, &gt;=2000=1.83%</span><br><span class="line">  cpu          : usr=99.85%, sys=0.08%, ctx=94, majf=0, minf=0</span><br><span class="line">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=99.9%</span><br><span class="line">     submit    : 0=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</span><br><span class="line">     issued rwts: total=84415,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class="line">     latency   : target=0, window=0, percentile=100.00%, depth=128</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs):</span><br><span class="line">   READ: bw=2729KiB/s (2795kB/s), 2729KiB/s-2729KiB/s (2795kB/s-2795kB/s), io=330MiB (346MB), run=123713-123713msec</span><br><span class="line"></span><br><span class="line">Disk stats (read/write):</span><br><span class="line">    dm-0: ios=84415/17, merge=0/0, ticks=15416332/27284, in_queue=15443616, util=100.00%, aggrios=84414/15, aggrmerge=1/2, aggrticks=15402295/25881, aggrin_queue=15260184, aggrutil=100.00%</span><br><span class="line">  vda: ios=84414/15, merge=1/2, ticks=15402295/25881, in_queue=15260184, util=100.00%</span><br></pre></td></tr></table></figure><h4 id="lmbench"><a href="#lmbench" class="headerlink" title="lmbench"></a>lmbench</h4><p><code>Lmbench</code> 是一款简易可以移植的内存测试工具，其主要功能有，带宽测评（读取缓存文件、拷贝内存、读&#x2F;写内存、管道、TCP），延时测评（上下文切换、网络、文件系统的建立和删除、进程创建、<a href="https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">信号处理</a>、上层系统调用、内存读入反应时间）等功能。</p><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><p>Stream内存带宽性能测试基准工具。</p><p>stream通过生成四种不同模式下的内存读写操作，用于测试内存带宽。</p><p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p><p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p><p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p><p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存数组中读两个值a、b，对其进行乘加混合运算（a+因子* b），将运算结果写入到另一个内存单元。 </p><h4 id="iozone"><a href="#iozone" class="headerlink" title="iozone"></a>iozone</h4><p>IOzone是文件系统性能测试工具。可以测试不同的操作系统中文件系统的读写性能。可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。</p><table><thead><tr><th>Write</th><th>测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作 “元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write 的性能通常会比 Re-write 的性能低。</th></tr></thead><tbody><tr><td>Re-write</td><td>测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。Re-write 的性能通常比 Write 的性能高。</td></tr><tr><td>Read</td><td>测试读一个已存在的文件的性能。</td></tr><tr><td>Re-Read</td><td>测试读一个最近读过的文件的性能。Re-Read 性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读以提高性能。</td></tr><tr><td>Random Read</td><td>测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td></tr><tr><td>Random Write</td><td>测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。</td></tr><tr><td>Random Mix</td><td>测试读写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他。这个测试只有在吞吐量测试模式下才能进行。每个线程 &#x2F; 进程运行读或写测试。这种分布式读 &#x2F; 写测试是基于 round robin 模式的。最好使用多于一个线程 &#x2F; 进程执行此测试。</td></tr><tr><td>Backwards Read</td><td>测试使用倒序读一个文件的性能。这种读文件方法可能看起来很可笑，事实上，有些应用确实这么干。MSC Nastran 是一个使用倒序读文件的应用程序的一个例子。它所读的文件都十分大（大小从 G 级别到 T 级别）。尽管许多操作系统使用一些特殊实现来优化顺序读文件的速度，很少有操作系统注意到并增强倒序读文件的性能。</td></tr><tr><td>Record Rewrite</td><td>测试写与覆盖写一个文件中的特定块的性能。这个块可能会发生一些很有趣的事。如果这个块足够小（比 CPU 数据缓存小），测出来的性能将会非常高。如果比 CPU 数据缓存大而比 TLB 小，测出来的是另一个阶段的性能。如果比此二者都大，但比操作系统缓存小，得到的性能又是一个阶段。若大到超过操作系统缓存，又是另一番结果。</td></tr><tr><td>Strided Read</td><td>测试跳跃读一个文件的性能。举例如下：在 0 偏移量处读 4Kbytes，然后间隔 200Kbytes, 读 4Kbytes，再间隔 200Kbytes，如此反复。此时的模式是读 4Kbytes，间隔 200Kbytes 并重复这个模式。这又是一个典型的应用行为，文件中使用了数据结构并且访问这个数据结构的特定区域的应用程序常常这样做。许多操作系统并没注意到这种行为或者针对这种类型的访问做一些优化。同样，这种访问行为也可能导致一些有趣的性能异常。一个例子是在一个数据片化的文件系统里，应用程序的跳跃导致某一个特定的磁盘成为性能瓶颈。</td></tr><tr><td>Fwrite</td><td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。这个测试是写一个新文件，所以元数据的写入也是要的。</td></tr><tr><td>Frewrite</td><td>测试调用库函数 fwrite () 来写文件的性能。这是一个执行缓存与阻塞写操作的库例程。缓存在用户空间之内。如果一个应用程序想要写很小的传输块，fwrite () 函数中的缓存与阻塞 I&#x2F;O 功能能通过减少实际操作系统调用并在操作系统调用时增加传输块的大小来增强应用程序的性能。</td></tr></tbody></table><h4 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h4><p>iperf3是基于Client&#x2F;Server的网络性能测试工具，通常用于测试网络上可达到的最大带宽，它能够测试TCP、UDP及SCTP的带宽质量，可以提供网络吞吐量、网络波动、网络丢包率以及最大传输单元大小等信息，能够帮助我们测试网络性能，定位网络瓶颈。</p><h4 id="netperf"><a href="#netperf" class="headerlink" title="netperf"></a>netperf</h4><p>Netperf是一种网络性能的测量工具，可以测试基于TCP或UDP吞吐、响应速率。Netperf包括Clien和Server端，Server端主要用来实现监听工作，Client端进行测试。</p><h4 id="ltp"><a href="#ltp" class="headerlink" title="ltp"></a>ltp</h4><p>LTP测试套件是测试Linux内核和内核相关特性的工具的集合。该工具的目的是通过把测试自动化引入到Linux内核测试，提高Linux的内核质量。通过功能测试、压力测试和回归测试来验证 Linux 系统的可靠性、稳定性和健壮性。整个项目约4000个测试用例。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tools </category>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java安装配置</title>
      <link href="/2023/12/15/Java%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/15/Java%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-环境安装配置"><a href="#Java-环境安装配置" class="headerlink" title="Java-环境安装配置"></a>Java-环境安装配置</h1><p>Link： <a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p><p>下载tar包，解压到指定的位置</p><p>修改环境变量(Linux)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/opt/java/jdk1.8.0_381</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure><h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><p>Link：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME=/opt/maven/apache-maven-3.9.4</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure><h1 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包jar</span></span><br><span class="line">mvn package ***.jar</span><br><span class="line"><span class="comment"># 直接运行</span></span><br><span class="line">java -jar ***.jar</span><br><span class="line"><span class="comment"># 开启后台运行</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar ***.jar &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python安装配置</title>
      <link href="/2023/12/15/Python%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/15/Python%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><ol><li>下载python<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class="line"><span class="comment"># 解压到opt</span></span><br><span class="line">$ tar -zxvf Python-3.8.0.tgz -C /opt</span><br></pre></td></tr></table></figure></li><li>编译安装python3.8.0<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入到python-3.8.0文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt/Python-3.8.0 </span><br><span class="line"><span class="comment">#检查以确保系统满足程序的最低要求</span></span><br><span class="line">$ sudo ./configure </span><br><span class="line"><span class="comment">#执行编译脚本</span></span><br><span class="line">$ sudo make </span><br><span class="line"><span class="comment">#直接安装</span></span><br><span class="line">$ sudo make install</span><br><span class="line"><span class="comment">#替换原版本安装</span></span><br><span class="line">$ sudo make altinstall</span><br></pre></td></tr></table></figure></li><li>修改python默认版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询python3.8位置</span></span><br><span class="line">$ whereis python3.8</span><br><span class="line">python3.9: /usr/local/bin/python3.8 /usr/local/lib/python3.8</span><br><span class="line"><span class="comment">#删除当前软连接</span></span><br><span class="line">$ sudo <span class="built_in">rm</span> /usr/bin/python</span><br><span class="line"><span class="comment">#为新版python创建软链接</span></span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/bin/python3.8 /usr/bin/python</span><br></pre></td></tr></table></figure></li><li>配置环境变量<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ vim .bash_profile</span><br><span class="line"><span class="comment"># ... 此处省略上面的代码 ...</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/python38/bin</span><br><span class="line"><span class="comment"># ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li><li>激活环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li></ol><h1 id="修改Python默认版本"><a href="#修改Python默认版本" class="headerlink" title="修改Python默认版本"></a>修改Python默认版本</h1><ol><li>查询当前版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 2.7.16</span><br></pre></td></tr></table></figure></li><li>删除当前软链接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">rm</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li><li>为新版python创建软链接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure></li><li>校验结果<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.7.3</span><br></pre></td></tr></table></figure></li></ol><h1 id="pip源配置"><a href="#pip源配置" class="headerlink" title="pip源配置"></a>pip源配置</h1><p>pip配置信息保存路径：~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置清华源</span></span><br><span class="line">$ pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment">#删除配置</span></span><br><span class="line">$ pip config <span class="built_in">unset</span> global.index-url</span><br></pre></td></tr></table></figure><h1 id="venv环境配置"><a href="#venv环境配置" class="headerlink" title="venv环境配置"></a>venv环境配置</h1><p>1.创建独立的python运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建独立目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> venv</span><br><span class="line">$ <span class="built_in">cd</span> venv/</span><br><span class="line"><span class="comment">#初始化python运行环境</span></span><br><span class="line">$ python* -m venv .</span><br><span class="line"><span class="comment">#查看当前目录，发现生成lib，include,bin，pyvenv.cfg</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">bin  include  lib  pyvenv.cfg</span><br><span class="line"><span class="comment">#进入bin目录，激活该venv环境</span></span><br><span class="line">$ <span class="built_in">cd</span> bin</span><br><span class="line">$ <span class="built_in">source</span> activate</span><br><span class="line"><span class="comment">#退出当前的proj101env环境</span></span><br><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><h1 id="Ipython编程工具"><a href="#Ipython编程工具" class="headerlink" title="Ipython编程工具"></a>Ipython编程工具</h1><ol><li>安装Ipython<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython</span><br></pre></td></tr></table></figure></li><li>启动IPython<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipython</span><br></pre></td></tr></table></figure></li><li>退出ipython<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ctl+D</span><br></pre></td></tr></table></figure>turtle图形绘制工具</li><li>安装依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Ubuntu or other distros with Apt:</span></span><br><span class="line">$ sudo apt-get install python3-tk</span><br><span class="line"><span class="comment"># For Fedora:</span></span><br><span class="line">$ sudo dnf install python3-tkinter</span><br></pre></td></tr></table></figure></li><li>绘制图形<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">turtle.pensize(4)</span><br><span class="line">turtle.pencolor(&#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">turtle.forward(100)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(100)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(100)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(100)</span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2023/12/15/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/12/15/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h1><p>“待补充···”</p><h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><p>优先级：local &gt; global &gt; system</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &lt;name&gt;</span><br><span class="line">git config user.email &lt;email&gt;</span><br><span class="line"><span class="comment"># --local ：local只对仓库有效</span></span><br><span class="line"><span class="comment"># --global ：global对登录用户所有仓库有效</span></span><br><span class="line"><span class="comment"># --system ：system对系统的所有用户有效</span></span><br></pre></td></tr></table></figure><h1 id="本地仓库切换分支"><a href="#本地仓库切换分支" class="headerlink" title="本地仓库切换分支"></a>本地仓库切换分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;old-branch&gt;</span><br><span class="line">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="合并远程分支"><a href="#合并远程分支" class="headerlink" title="合并远程分支"></a>合并远程分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;local-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin -d &lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="拉取远程代码到本地分支"><a href="#拉取远程代码到本地分支" class="headerlink" title="拉取远程代码到本地分支"></a>拉取远程代码到本地分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin &lt;local-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地分支推送到远程分支，若远程分支不存在则会自动新建新远程分支</span></span><br><span class="line">git push origin &lt;local-branch&gt;:&lt;cloud-branch&gt;</span><br><span class="line"><span class="comment"># 将本地空分支推送到远程分支上时，则会删除该远程分支</span></span><br><span class="line">git push origin :&lt;cloud-branch&gt;</span><br></pre></td></tr></table></figure><h1 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地通常会有无数次 commit ，可以合并“相同功能”的多个 commit，以保持历史的简洁。</span></span><br><span class="line">git commit --amend </span><br></pre></td></tr></table></figure><h1 id="添加多个远程仓库"><a href="#添加多个远程仓库" class="headerlink" title="添加多个远程仓库"></a>添加多个远程仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加远程仓库地址，并将其命名。</span></span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"><span class="comment">#提交到远程仓库，origin是默认仓库地址。</span></span><br><span class="line">git push &lt;name&gt; &lt;本地分支&gt;:&lt;远程仓库分支&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tools </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mock编译rpm软件包</title>
      <link href="/2023/12/15/mock%E7%BC%96%E8%AF%91rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
      <url>/2023/12/15/mock%E7%BC%96%E8%AF%91rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="mock-环境编译"><a href="#mock-环境编译" class="headerlink" title="mock 环境编译"></a>mock 环境编译</h1><p>1、yum install mock</p><p>2、新建或修改 &#x2F;etc&#x2F;mock&#x2F;example.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">config_opts[&#x27;basedir&#x27;] = &#x27;/home/&#x27;</span><br><span class="line">config_opts[&#x27;root&#x27;] = &#x27;example&#x27;</span><br><span class="line">config_opts[&#x27;target_arch&#x27;] = &#x27;x86_64&#x27;</span><br><span class="line">config_opts[&#x27;legal_host_arches&#x27;] = (&#x27;x86_64&#x27;,)</span><br><span class="line">config_opts[&#x27;chroot_setup_cmd&#x27;] = &#x27;install tar gcc-c++   which xz sed make bzip2 gzip gcc coreutils unzip shadow-utils diffutils cpio bash gawk rpm-build info patch util-linux findutils grep vim automake yum wget git&#x27;</span><br><span class="line"></span><br><span class="line">config_opts[&#x27;releasever&#x27;] = &#x27;8&#x27;</span><br><span class="line"></span><br><span class="line">config_opts[&#x27;yum.conf&#x27;] = &quot;&quot;&quot;</span><br><span class="line">[main]</span><br><span class="line">keepcache=1</span><br><span class="line">debuglevel=2</span><br><span class="line">reposdir=/dev/null</span><br><span class="line">logfile=/var/log/yum.log</span><br><span class="line">retries=20</span><br><span class="line">obsoletes=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">assumeyes=1</span><br><span class="line">syslog_ident=mock</span><br><span class="line">syslog_device=</span><br><span class="line">mdpolicy=group:primary</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">repos</span></span><br><span class="line">[base]</span><br><span class="line">name=base</span><br><span class="line">baseurl = url</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">module_hotfixes=true</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、可使用root直接运行，也可创建mock用户并添加到mockbuild组中在编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mock -r example --rebuild *src.rpm</span><br></pre></td></tr></table></figure><p>4、使用root用户进入mock环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/lib/mock/**</span><br><span class="line">$ <span class="built_in">chroot</span> .</span><br></pre></td></tr></table></figure><h1 id="rpm-build编译"><a href="#rpm-build编译" class="headerlink" title="rpm-build编译"></a>rpm-build编译</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压src包</span></span><br><span class="line">$ rpm -ivh -D <span class="string">&quot;_topdir `pwd`&quot;</span>  /path/to/*.src.rpm</span><br><span class="line"><span class="comment">#根据spec下载依赖</span></span><br><span class="line">$ yum-builddep /path/to/*.spec</span><br><span class="line"><span class="comment"># -D &quot;_topdir `pwd`&quot; 指定编译目录，否则会在默认目录下编译</span></span><br><span class="line">$ rpmbuild -ba -D <span class="string">&quot;_topdir `pwd`&quot;</span> /path/to/*.spec</span><br></pre></td></tr></table></figure><h1 id="koji提交"><a href="#koji提交" class="headerlink" title="koji提交"></a>koji提交</h1><p>1 .安装koji</p><p>2.修改koji配置文件</p><p>3.提交rpm包</p>]]></content>
      
      
      <categories>
          
          <category> Learning Tools </category>
          
          <category> Linux </category>
          
          <category> Rpm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Rpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8数据库配置</title>
      <link href="/2023/12/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql8-0"><a href="#mysql8-0" class="headerlink" title="mysql8.0"></a>mysql8.0</h1><h2 id="mysql8-0-设置表名不区分大小写"><a href="#mysql8-0-设置表名不区分大小写" class="headerlink" title="mysql8.0 设置表名不区分大小写"></a>mysql8.0 设置表名不区分大小写</h2><ul><li>安装数据库之后不启动的情况下，修改&#x2F;etc&#x2F;my.cnf,在末行添加如下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="mysql8-0-设置密码"><a href="#mysql8-0-设置密码" class="headerlink" title="mysql8.0 设置密码"></a>mysql8.0 设置密码</h2><ul><li>设置密码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqladmin -uroot -p<span class="string">&#x27;&#x27;</span> password <span class="string">&#x27;new-password&#x27;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="mysql8-0-开启远程连接"><a href="#mysql8-0-开启远程连接" class="headerlink" title="mysql8.0 开启远程连接"></a>mysql8.0 开启远程连接</h2><ul><li><p>选择mysql数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; use mysql</span><br></pre></td></tr></table></figure></li><li><p>更新域属性，’%’表示允许外部访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>刷新:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。<br>MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</p></li><li><p>执行授权语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li><li><p>或者开放3306端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="保存现有数据更新数据库"><a href="#保存现有数据更新数据库" class="headerlink" title="保存现有数据更新数据库"></a>保存现有数据更新数据库</h1><p>保存指定数据库数据到sql文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -pUnion@1234 --databases ustack_test &gt; ustack_test.sql</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc tablename;</span><br></pre></td></tr></table></figure><p>查询数据库创建时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT create_time  FROM information_schema.tables  WHERE table_schema = &#x27;数据库名&#x27;</span><br></pre></td></tr></table></figure><p>导出数据到sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -pPASSWORD  database_name &gt; name.sql</span><br></pre></td></tr></table></figure><p>导入现有sql</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvm磁盘扩容</title>
      <link href="/2023/12/15/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E6%A0%B9%E5%88%86%E5%8C%BA/"/>
      <url>/2023/12/15/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E6%A0%B9%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="扩容脚本"><a href="#扩容脚本" class="headerlink" title="扩容脚本"></a>扩容脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义新磁盘，若当前磁盘分区不存在可使用fdisk提前划分。</span></span><br><span class="line"></span><br><span class="line">disk=/dev/vda3</span><br><span class="line">vg=***</span><br><span class="line"></span><br><span class="line">pvcreate <span class="variable">$disk</span> </span><br><span class="line">vgextend <span class="string">&quot;<span class="variable">$vg</span>&quot;</span> <span class="variable">$disk</span> </span><br><span class="line">lvextend /dev/<span class="variable">$&#123;vg&#125;</span>/root <span class="variable">$disk</span> <span class="comment"># xfs文件系统时，写入文件系统，使扩容生效 </span></span><br><span class="line">xfs_growfs /dev/mapper/<span class="variable">$&#123;vg&#125;</span>-root <span class="comment"># ext文件系统用resize2fs命令替换xfs_growfs命令</span></span><br></pre></td></tr></table></figure><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><ul><li>磁盘，使用fdisk进行硬盘分区，三个主分区(p)，其余都是拓展分区(e)。</li><li>物理卷(PV)，在逻辑卷管理系统最底层，可以是整个物理硬盘或实际物理硬盘上的分区。</li><li>卷组(VG)，建立在物理卷上，一卷组中至少要包括一物理卷，卷组建立后可动态的添加卷到卷组中，一个逻辑卷管理系统工程中可有多个卷组。对于LVM上面的文件系统而言，VG就是一个大磁盘。文件系统时看不到LVM下面的组成部分的，它只管使用，而LVM则负责管理下面的组成储存块。</li><li>逻辑卷(LV)，建立在卷组基础上，卷组中未分配空间可用于建立新的逻辑卷，逻辑卷建立后可以动态扩展和缩小空间。</li><li>物理区域(PE)，是物理卷中可用于分配的最小存储单元，物理区域大小在建立卷组时指定，一旦确定不能更改，同一卷组所有物理卷的物理区域大小需一致，新的pv(物理卷)加入到vg(卷组)后，pe(物理区域)的大小自动更改为vg(卷组)中定义的pe大小。</li><li>逻辑区域（LE），是逻辑卷中可用于分配的最小存储单元，逻辑区域的大小取决于逻辑卷所在卷组中的物理区域的大小。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li><li>卷组描述区域：卷组描述区域存在于每个物理卷中，用于描述物理卷本身、物理卷所属卷组、卷组中逻辑卷、逻辑卷中物理区域的分配等所有信息，它是在使用pvcreate建立物理卷时建立的。</li></ul><h1 id="xfs-growfs"><a href="#xfs-growfs" class="headerlink" title="xfs_growfs"></a>xfs_growfs</h1><ul><li>扩展一个现存的XFS文件系统</li></ul><h1 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h1><ul><li>使用pv，vg，lv相关命令请先安装lvm2<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum insall lvm2</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/m0_52544877/article/details/127764618#t2">https://blog.csdn.net/m0_52544877/article/details/127764618#t2</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning Tools </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Blog</title>
      <link href="/2023/12/14/%E6%90%AD%E5%BB%BABlog/"/>
      <url>/2023/12/14/%E6%90%AD%E5%BB%BABlog/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建Blog"><a href="#搭建Blog" class="headerlink" title="搭建Blog"></a>搭建Blog</h1><h2 id="安装node-npm-n"><a href="#安装node-npm-n" class="headerlink" title="安装node npm n"></a>安装node npm n</h2><ul><li><p>安装node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure></li><li><p>安装npm<br>npm是nodejs的包管理器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure></li><li><p>安装n</p><p>n 是交互式 node.js 版本管理工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br></pre></td></tr></table></figure><p>可以使用n安装特定版本的nodejs。</p></li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>​Hexo 是<strong>一个快速、简洁且高效的博客框架</strong>。 Hexo 使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li><p>配置国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="built_in">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装hexo-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm init blog</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>打包成dist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>运行hexo项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>清楚hexo部署数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可删除.deploy_git文件夹在执行hexo clean和hexo deploy</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>部署到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据_config.yaml配置文件中的仓库地址，部署到服务器。</span></span><br><span class="line">hexo delpoy</span><br></pre></td></tr></table></figure></li><li><p>替换主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装主题和渲染器：</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class="line">$ npm install hexo-renderer-pug --save  </span><br><span class="line">$ npm install hexo-renderer-sass --save  </span><br><span class="line">编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</span><br><span class="line">注：依赖hexo-renderer-sass安装时容易报错，很可能是国内网络问题，请尝试使用代理或者切换至NPM的国内镜像源安装。</span><br></pre></td></tr></table></figure></li><li><p>创建”About页”</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。</span><br></pre></td></tr></table></figure><ul><li>创建”Archive页”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page archive</span><br><span class="line">创建成功后，编辑博客目录下 /source/archive/index.md。</span><br></pre></td></tr></table></figure><ul><li>hexo使用参考：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning Tools </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
